{"ast":null,"code":"var _jsxFileName = \"/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/Cities.js\";\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'; //components\n\nimport PostResource from './PostResource';\n\nclass Cities extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      search: \"\",\n      filteredResults: [],\n      newCity: \"\",\n      newCountry: \"\",\n      newUrl: \"\"\n    };\n    this.getCities = this.getCities.bind(this);\n    this.clearFields = this.clearFields.bind(this);\n  }\n\n  async componentDidMount() {\n    this.timer = setInterval(() => this.getCities(), 5000);\n  } // async getCities() {\n  //   const url = \"http://localhost:5000/api/cities\";\n  //   const response = await fetch(url);\n  //   const data = await response.json();\n  //   console.log(data);\n  //   this.setState({cities: data});\n  //   this.setState({filteredResults: data})\n  //   this.setState({loading: false});\n  // }\n\n\n  async updateSearch(e) {\n    await this.setState({\n      search: e.target.value\n    });\n    await this.setState({\n      filteredResults: this.props.cities.filter(city => {\n        return city.name.indexOf(this.state.search) !== -1;\n      })\n    });\n  }\n\n  async updateNewCity(e) {\n    await this.setState({\n      newCity: e.target.value\n    });\n  }\n\n  async updateNewCountry(e) {\n    await this.setState({\n      newCountry: e.target.value\n    });\n  }\n\n  async updateNewUrl(e) {\n    await this.setState({\n      newUrl: e.target.value\n    });\n  }\n\n  clearFields() {\n    console.log('here');\n    this.setState({\n      newCity: \"\"\n    });\n    this.setState({\n      newCountry: \"\"\n    });\n    this.setState({\n      newUrl: \"\"\n    });\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Cities\"), React.createElement(\"label\", {\n      htmlFor: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \" Add City: \"), React.createElement(\"input\", {\n      id: \"searchBar\",\n      type: \"text\",\n      value: this.state.newCity,\n      onChange: this.updateNewCity.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \" Country: \"), React.createElement(\"input\", {\n      id: \"searchBar\",\n      type: \"text\",\n      value: this.state.newCountry,\n      onChange: this.updateNewCountry.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \" Image URL: \"), React.createElement(\"input\", {\n      id: \"searchBar\",\n      type: \"text\",\n      value: this.state.newUrl,\n      onChange: this.updateNewUrl.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(PostResource, {\n      url: \"http://localhost:5000/api/cities\",\n      dataObject: {\n        \"name\": this.state.newCity,\n        \"country\": this.state.newCountry,\n        \"imageUrl\": this.state.newUrl\n      },\n      action: this.clearFields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \" Search List: \"), React.createElement(\"input\", {\n      id: \"searchBar\",\n      type: \"text\",\n      value: this.state.search,\n      onChange: this.updateSearch.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.loading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"loading...\") : React.createElement(TransitionGroup, {\n      className: \"cities-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.filteredResults.map(({\n      id,\n      name,\n      country\n    }) => React.createElement(CSSTransition, {\n      key: id,\n      timeout: 500,\n      classNames: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, country)))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities\n  };\n};\n\nexport default connect()(Cities);","map":{"version":3,"sources":["/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/Cities.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Button","CSSTransition","TransitionGroup","connect","PostResource","Cities","constructor","props","state","loading","search","filteredResults","newCity","newCountry","newUrl","getCities","bind","clearFields","componentDidMount","timer","setInterval","updateSearch","e","setState","target","value","cities","filter","city","name","indexOf","updateNewCity","updateNewCountry","updateNewUrl","console","log","render","map","id","country","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'\n\n//components\nimport PostResource from './PostResource';\n\nclass Cities extends Component {\n  constructor(props) {\n    super(props)\n\n    this.getCities = this.getCities.bind(this);\n    this.clearFields = this.clearFields.bind(this);\n\n  }\n\n  state = {\n    loading: true,\n    search: \"\",\n    filteredResults: [],\n    newCity: \"\",\n    newCountry: \"\",\n    newUrl: \"\",\n  }\n  \n  async componentDidMount() {\n    this.timer = setInterval(()=> this.getCities(), 5000)\n  }\n\n  // async getCities() {\n  //   const url = \"http://localhost:5000/api/cities\";\n  //   const response = await fetch(url);\n  //   const data = await response.json();\n  //   console.log(data);\n  //   this.setState({cities: data});\n  //   this.setState({filteredResults: data})\n  //   this.setState({loading: false});\n  // }\n\n  async updateSearch(e) {\n    await this.setState({search: e.target.value});\n    await this.setState({filteredResults: this.props.cities.filter( (city) =>{\n      return city.name.indexOf(this.state.search) !== -1;\n    })})\n  }\n\n  async updateNewCity(e) {\n    await this.setState({newCity: e.target.value});\n  }\n\n  async updateNewCountry(e) {\n    await this.setState({newCountry: e.target.value});\n  }\n\n  async updateNewUrl(e) {\n    await this.setState({newUrl: e.target.value});\n  }\n\n  clearFields() {\n    console.log('here')\n    this.setState({newCity: \"\"});\n    this.setState({newCountry: \"\"});\n    this.setState({newUrl: \"\"});\n  }\n\n\n  render() {\n    return (\n      <Container>\n\n        <h1>Cities</h1>\n\n        <label htmlFor=\"searchBar\"> Add City: </label>\n        <input id=\"searchBar\" type=\"text\" value ={this.state.newCity} onChange={this.updateNewCity.bind(this)}></input>\n        <label htmlFor=\"searchBar\"> Country: </label>\n        <input id=\"searchBar\" type=\"text\" value ={this.state.newCountry} onChange={this.updateNewCountry.bind(this)}></input>\n        <label htmlFor=\"searchBar\"> Image URL: </label>\n        <input id=\"searchBar\" type=\"text\" value ={this.state.newUrl} onChange={this.updateNewUrl.bind(this)}></input>\n\n        <PostResource \n          url=\"http://localhost:5000/api/cities\" \n          dataObject={{\"name\": this.state.newCity, \"country\": this.state.newCountry, \"imageUrl\": this.state.newUrl}} \n          action={this.clearFields}\n          >  \n        </PostResource>\n\n        <label htmlFor=\"searchBar\"> Search List: </label>\n        <input id=\"searchBar\" type=\"text\" value ={this.state.search} onChange={this.updateSearch.bind(this)}></input>\n\n        <ListGroup>\n          {this.state.loading ? <p>loading...</p> : \n          <TransitionGroup className=\"cities-list\">\n            {this.state.filteredResults.map(({ id, name, country }) => (\n              <CSSTransition key={id} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                  <p>{name}</p><p>{country}</p>\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n          }\n        </ListGroup>\n      </Container>\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cities: state.cities\n  }\n}\n\n\nexport default connect()(Cities)"]},"metadata":{},"sourceType":"module"}