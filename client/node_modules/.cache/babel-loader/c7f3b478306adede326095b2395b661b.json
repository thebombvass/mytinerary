{"ast":null,"code":"// export const RECEIVE_CITIES = 'RECEIVE_CITIES'\n// const RECEIVE_CITIES = 'RECEIVE_CITIES'\n// function receiveCities(json) {\n//   return {\n//     type: RECEIVE_CITIES,\n//     cities: json.data.children.map(child => child.data),\n//     receivedAt: Date.now()\n//   }\n// }\nexport function getCities() {\n  return dispatch => {\n    return fetch(\"http://localhost:5000/api/cities\").then(async response => {\n      const data = await response.json();\n      await dispatch(fetchCitiesAction(data));\n    }).catch(error => {\n      dispatch(fetchCitiesErrorAction(error));\n    });\n  };\n}\nexport function fetchCitiesAction(data) {\n  return {\n    type: 'FETCH_CITIES_REQUEST',\n    status: '200 OK',\n    response: data\n  };\n}\nexport function fetchCitiesErrorAction(error) {\n  return {\n    type: 'FETCH_CITIES_ERROR',\n    status: error,\n    response: \"\"\n  };\n}\nexport function filterCities(search) {\n  search = filteredResults;\n\n  filteredResults: this.props.cities.filter(city => {\n    return city.name.indexOf(this.state.search) !== -1;\n  });\n\n  return {\n    type: 'FILTER_CITIES',\n    filteredResults: filteredResults\n  };\n}","map":{"version":3,"sources":["/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/store/actions/cityActions.js"],"names":["getCities","dispatch","fetch","then","response","data","json","fetchCitiesAction","catch","error","fetchCitiesErrorAction","type","status","filterCities","search","filteredResults","props","cities","filter","city","name","indexOf","state"],"mappings":"AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAO,SAASA,SAAT,GAAqB;AACxB,SAAOC,QAAD,IAAa;AACf,WAAOC,KAAK,CAAC,kCAAD,CAAL,CAA0CC,IAA1C,CAA+C,MAAMC,QAAN,IAAkB;AACpE,YAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB;AACA,YAAML,QAAQ,CAACM,iBAAiB,CAACF,IAAD,CAAlB,CAAd;AACH,KAHM,EAING,KAJM,CAICC,KAAD,IAAU;AACbR,MAAAA,QAAQ,CAACS,sBAAsB,CAACD,KAAD,CAAvB,CAAR;AACH,KANM,CAAP;AAOH,GARD;AASD;AAEH,OAAO,SAASF,iBAAT,CAA2BF,IAA3B,EAAiC;AACpC,SAAO;AACHM,IAAAA,IAAI,EAAE,sBADH;AAEHC,IAAAA,MAAM,EAAE,QAFL;AAGHR,IAAAA,QAAQ,EAAEC;AAHP,GAAP;AAKH;AAED,OAAO,SAASK,sBAAT,CAAgCD,KAAhC,EAAuC;AAC1C,SAAO;AACHE,IAAAA,IAAI,EAAE,oBADH;AAEHC,IAAAA,MAAM,EAAEH,KAFL;AAGHL,IAAAA,QAAQ,EAAE;AAHP,GAAP;AAKH;AAED,OAAO,SAASS,YAAT,CAAsBC,MAAtB,EAA8B;AACjCA,EAAAA,MAAM,GAAGC,eAAT;;AACAA,EAAAA,eAAe,EAAE,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,MAAlB,CAA2BC,IAAD,IAAS;AAChD,WAAOA,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAkB,KAAKC,KAAL,CAAWR,MAA7B,MAAyC,CAAC,CAAjD;AACD,GAFc;;AAGjB,SAAO;AACHH,IAAAA,IAAI,EAAE,eADH;AAEHI,IAAAA,eAAe,EAAEA;AAFd,GAAP;AAIH","sourcesContent":["// export const RECEIVE_CITIES = 'RECEIVE_CITIES'\n// const RECEIVE_CITIES = 'RECEIVE_CITIES'\n\n\n// function receiveCities(json) {\n//   return {\n//     type: RECEIVE_CITIES,\n//     cities: json.data.children.map(child => child.data),\n//     receivedAt: Date.now()\n//   }\n// }\n\n\nexport function getCities() {\n    return(dispatch)=> {\n        return fetch(\"http://localhost:5000/api/cities\").then(async(response)=> {\n            const data = await response.json()\n            await dispatch(fetchCitiesAction(data))\n        })\n        .catch((error)=> {\n            dispatch(fetchCitiesErrorAction(error))\n        })\n    }\n  }\n\nexport function fetchCitiesAction(data) {\n    return {\n        type: 'FETCH_CITIES_REQUEST', \n        status: '200 OK', \n        response: data,\n    }\n}\n\nexport function fetchCitiesErrorAction(error) {\n    return {\n        type: 'FETCH_CITIES_ERROR', \n        status: error, \n        response: \"\",\n    }\n}\n\nexport function filterCities(search) {\n    search = filteredResults\n    filteredResults: this.props.cities.filter( (city) =>{\n        return city.name.indexOf(this.state.search) !== -1;\n      })\n    return {\n        type: 'FILTER_CITIES', \n        filteredResults: filteredResults,\n    }\n}\n"]},"metadata":{},"sourceType":"module"}