{"ast":null,"code":"var _jsxFileName = \"/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/PostResource.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport { connect } from 'react-redux'; //import actions needed below\n\nimport { clearNewCityFields, getCities, clearNewUserFields } from '../store/actions/cityActions';\n\nclass PostResource extends Component {\n  async makePost(url, dataObject) {\n    console.log('inside post');\n    this.props.dispatch(clearNewCityFields());\n    this.props.dispatch(clearNewUserFields());\n    console.log('working');\n    await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(dataObject)\n    }).then(res => res.json()) //TO DO: need to only alert created on success\n    // also errors arent showing up. \n    // Specifically for creating an account, if your password doesn't meet the recs and it fails it should notify the suer of that\n    .then(data => console.log(data), alert('Created!')).catch(err => console.log(err));\n    this.props.dispatch(getCities()); //also for later - how do you test that someone is signed in or nah on all pages? just keep in mind\n  }\n\n  testFunction(url, dataObject) {\n    console.log('test');\n    this.props.dispatch(clearNewCityFields());\n    this.props.dispatch(clearNewUserFields());\n    console.log(\"URL: \" + url);\n    console.log(\"data object\");\n    console.log(dataObject);\n  }\n\n  setItinUrl() {\n    var cityUrlName = \"\";\n\n    for (var i = 0; i < this.props.newCity.length; i++) {\n      if (this.props.newCity.charAt(i) == \" \") {\n        cityUrlName += \"%20\";\n      } else {\n        cityUrlName += this.props.newCity.charAt(i);\n      }\n    }\n\n    console.log(cityUrlName);\n    var itinUrl = window.location.protocol + \"//\" + window.location.hostname + \":\" + window.location.port + \"/itineraries/\" + cityUrlName;\n    console.log(itinUrl);\n    return itinUrl;\n  } //The click will chose which kind of data we are sending using the parent component indication from props\n  //    and then come here. This is also where testFunction can be uncommented and used as opposed to makePost\n  //   in case you need to test this component and info it is sending without actually sending anything to the db\n  //NOTE: IF YOU TEST, REMEMBER TO UNCOMMENT MAKEPOST WHEN DONE FOR ALL FUNCTIONS BELOW\n  //if using this for Cities Post\n\n\n  citiesDataObjectCreator(url) {\n    const itinUrl = this.setItinUrl();\n    const dataObject = {\n      \"name\": this.props.newCity,\n      \"country\": this.props.newCountry,\n      \"imageUrl\": this.props.newUrl,\n      \"itinerariesUrl\": itinUrl\n    };\n    this.makePost(url, dataObject); // this.testFunction(url, dataObject)\n  } //if using this for Create Account Post \n\n\n  createAccountDataObjectCreator(url) {\n    const dataObject = {\n      \"email\": this.props.newEmail,\n      \"password\": this.props.newPassword,\n      \"profPicUrl\": this.props.newProfPicUrl\n    };\n    this.makePost(url, dataObject); // this.testFunction(url, dataObject)\n  }\n\n  logInDataObjectCreator(url) {\n    const dataObject = {\n      \"email\": this.props.email,\n      \"password\": this.props.password,\n      \"profPicUrl\": this.props.newProfPicUrl\n    };\n    this.makePost(url, dataObject); // this.testFunction(url, dataObject)\n  }\n\n  render() {\n    return React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '2rem'\n      },\n      onClick: () => {\n        console.log('click');\n        const url = this.props.url;\n\n        if (this.props.parentComp == \"cities\") {\n          this.citiesDataObjectCreator(url);\n        } else if (this.props.parentComp == \"createAccount\") {\n          this.createAccountDataObjectCreator(url);\n        } else if (this.props.parentComp == \"logIn\") {\n          this.logInDataObjectCreator(url);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Submit\");\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    newCity: state.cities.newCity,\n    newCountry: state.cities.newCountry,\n    newUrl: state.cities.newUrl,\n    newEmail: state.cities.newEmail,\n    newPassword: state.cities.newPassword,\n    newProfPicUrl: state.cities.newProfPicUrl\n  };\n};\n\nexport default connect(mapStateToProps)(PostResource);","map":{"version":3,"sources":["/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/PostResource.js"],"names":["React","Component","Button","connect","clearNewCityFields","getCities","clearNewUserFields","PostResource","makePost","url","dataObject","console","log","props","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","data","alert","catch","err","testFunction","setItinUrl","cityUrlName","i","newCity","length","charAt","itinUrl","window","location","protocol","hostname","port","citiesDataObjectCreator","newCountry","newUrl","createAccountDataObjectCreator","newEmail","newPassword","newProfPicUrl","logInDataObjectCreator","email","password","render","marginBottom","parentComp","mapStateToProps","state","cities"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport { connect } from 'react-redux'\n//import actions needed below\nimport { clearNewCityFields, getCities,clearNewUserFields } from '../store/actions/cityActions';\n\n\n\nclass PostResource extends Component {    \n\n    async makePost(url, dataObject) {\n        console.log('inside post')\n        this.props.dispatch(clearNewCityFields())\n        this.props.dispatch(clearNewUserFields())\n        console.log('working')\n        await fetch(url, {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(dataObject)\n        }).then(res => res.json())\n        //TO DO: need to only alert created on success\n        // also errors arent showing up. \n        // Specifically for creating an account, if your password doesn't meet the recs and it fails it should notify the suer of that\n        .then(data => console.log(data), alert('Created!'))\n        .catch(err => console.log(err))\n\n    this.props.dispatch(getCities())\n\n    //also for later - how do you test that someone is signed in or nah on all pages? just keep in mind\n   }\n\n   testFunction(url, dataObject) {\n       console.log('test')\n       this.props.dispatch(clearNewCityFields())\n       this.props.dispatch(clearNewUserFields())\n        console.log(\"URL: \" + url);\n        console.log(\"data object\");\n        console.log(dataObject);\n   }\n\n    setItinUrl() {\n        var cityUrlName = \"\" \n\n        for (var i=0; i < this.props.newCity.length; i++) {\n            if (this.props.newCity.charAt(i) == \" \") {\n                cityUrlName += \"%20\";\n            } else {\n                cityUrlName += this.props.newCity.charAt(i);\n            }\n        }\n        console.log(cityUrlName)\n        var itinUrl = window.location.protocol + \"//\"+window.location.hostname+\":\"+window.location.port+ \"/itineraries/\"+cityUrlName\n        console.log(itinUrl)\n\n        return itinUrl;\n   }\n\n   //The click will chose which kind of data we are sending using the parent component indication from props\n   //    and then come here. This is also where testFunction can be uncommented and used as opposed to makePost\n   //   in case you need to test this component and info it is sending without actually sending anything to the db\n   //NOTE: IF YOU TEST, REMEMBER TO UNCOMMENT MAKEPOST WHEN DONE FOR ALL FUNCTIONS BELOW\n\n   //if using this for Cities Post\n   citiesDataObjectCreator(url) {\n    const itinUrl = this.setItinUrl();\n    const dataObject = {\"name\": this.props.newCity, \"country\": this.props.newCountry, \"imageUrl\": this.props.newUrl, \"itinerariesUrl\": itinUrl}\n    this.makePost(url, dataObject);\n    // this.testFunction(url, dataObject)\n   }\n\n   //if using this for Create Account Post \n   createAccountDataObjectCreator(url) {\n    const dataObject = {\"email\": this.props.newEmail, \"password\": this.props.newPassword, \"profPicUrl\": this.props.newProfPicUrl}\n    this.makePost(url, dataObject);\n    // this.testFunction(url, dataObject)\n   }\n\n   logInDataObjectCreator(url) {\n    const dataObject = {\"email\": this.props.email, \"password\": this.props.password, \"profPicUrl\": this.props.newProfPicUrl}\n    this.makePost(url, dataObject);\n    // this.testFunction(url, dataObject)\n   }\n\n\n    render(){\n        return (\n            <Button \n            color=\"dark\" \n            style={{marginBottom: '2rem'}}\n            onClick={()=> {\n                console.log('click')\n                const url = this.props.url;\n                if(this.props.parentComp == \"cities\") {\n                    this.citiesDataObjectCreator(url)\n                } else if (this.props.parentComp == \"createAccount\") {\n                    this.createAccountDataObjectCreator(url)\n                } else if (this.props.parentComp == \"logIn\") {\n                    this.logInDataObjectCreator(url)\n                }\n            }}\n            >Submit</Button>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        newCity: state.cities.newCity,\n        newCountry: state.cities.newCountry,\n        newUrl: state.cities.newUrl,\n        newEmail: state.cities.newEmail,\n        newPassword: state.cities.newPassword,\n        newProfPicUrl: state.cities.newProfPicUrl,\n    }\n  }\n\nexport default connect(mapStateToProps)(PostResource)"]},"metadata":{},"sourceType":"module"}