{"ast":null,"code":"var _jsxFileName = \"/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/Cities.js\";\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Collapse, Button, CardBody, Card } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'; //components\n\nimport PostResource from './PostResource';\nimport ItineraryCover from './ItineraryCover';\nimport NavBar from './NavBar'; //action imports\n\nimport { filterCities, setNewCity, setNewCountry, setNewUrl } from '../store/actions/cityActions';\n\nclass Cities extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      isToggleOn: false\n    };\n  }\n\n  // async componentDidMount() {\n  //   console.log(\"\")\n  // } \n  async updateSearch(e) {\n    await this.setState({\n      search: e.target.value\n    });\n    const searchResults = this.props.cities.filter(city => {\n      return city.name.indexOf(this.state.search) !== -1;\n    });\n    this.props.dispatch(filterCities(searchResults));\n  }\n\n  async updateNewCity(e) {\n    let newArrary = []; //TO DO: fix this somehow - Tolo and Toledo clash. Should only be at the end of the word. Diff ONblahblah?\n\n    for (let i = 0; i < this.props.cities.length; i++) {\n      newArrary.push(this.props.cities[i].name);\n    }\n\n    if (!newArrary.includes(e.target.value)) {\n      this.props.dispatch(setNewCity(e.target.value));\n    } else {\n      console.log('Sorry! This city was already created');\n    }\n  }\n\n  async updateNewCountry(e) {\n    this.props.dispatch(setNewCountry(e.target.value));\n  }\n\n  async updateNewUrl(e) {\n    this.props.dispatch(setNewUrl(e.target.value));\n  }\n\n  toggleAddCityForm() {\n    // this.setState(state => ({\n    //   isToggleOn: !state.isToggleOn\n    // }));\n    this.setState({\n      isToggleOn: !this.state.isToggleOn\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Cities\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.toggleAddCityForm.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Add City\"), React.createElement(Collapse, {\n      isOpen: this.state.isOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"addCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \" Add City: \"), React.createElement(\"input\", {\n      id: \"addCity\",\n      type: \"text\",\n      value: this.props.newCity,\n      onChange: this.updateNewCity.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), \" \", React.createElement(\"label\", {\n      htmlFor: \"addCountry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \" Country: \"), React.createElement(\"input\", {\n      id: \"addCountry\",\n      type: \"text\",\n      value: this.props.newCountry,\n      onChange: this.updateNewCountry.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"addImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \" Image URL: \"), React.createElement(\"input\", {\n      id: \"addImage\",\n      type: \"text\",\n      value: this.props.newUrl,\n      onChange: this.updateNewUrl.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(PostResource, {\n      url: \"http://localhost:5000/api/cities\",\n      parentComp: \"cities\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" Search List: \"), React.createElement(\"input\", {\n      id: \"searchBar\",\n      type: \"text\",\n      value: this.state.search,\n      onChange: this.updateSearch.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.props.loading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"loading...\") : React.createElement(TransitionGroup, {\n      className: \"cities-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.props.filteredResults.map(({\n      id,\n      name,\n      country,\n      imageUrl,\n      itinerariesUrl\n    }) => React.createElement(CSSTransition, {\n      key: id,\n      timeout: 500,\n      classNames: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: itinerariesUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(ItineraryCover, {\n      imageUrl: imageUrl,\n      styleInfo: \"CitiesList\",\n      cityName: name + \", \" + country,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })))))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities.cities,\n    status: state.cities.status,\n    loading: state.cities.loading,\n    filteredResults: state.cities.filteredResults,\n    newCity: state.cities.newCity,\n    newCountry: state.cities.newCountry,\n    newUrl: state.cities.newUrl\n  };\n}; // const mapDispatchToProps = dispatch => {\n//   return {\n//     filterSearch: searchResults => dispatch(filterCities(searchResults))\n//   }\n// }\n\n\nexport default connect(mapStateToProps)(Cities);","map":{"version":3,"sources":["/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/Cities.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Collapse","Button","CardBody","Card","CSSTransition","TransitionGroup","connect","PostResource","ItineraryCover","NavBar","filterCities","setNewCity","setNewCountry","setNewUrl","Cities","state","search","isToggleOn","updateSearch","e","setState","target","value","searchResults","props","cities","filter","city","name","indexOf","dispatch","updateNewCity","newArrary","i","length","push","includes","console","log","updateNewCountry","updateNewUrl","toggleAddCityForm","render","bind","isOpen","newCity","newCountry","newUrl","loading","filteredResults","map","id","country","imageUrl","itinerariesUrl","mapStateToProps","status"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem , Collapse, Button, CardBody, Card} from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'\n\n//components\nimport PostResource from './PostResource';\nimport ItineraryCover from './ItineraryCover';\nimport NavBar from './NavBar'\n\n//action imports\nimport { filterCities, setNewCity, setNewCountry, setNewUrl } from '../store/actions/cityActions';\n\nclass Cities extends Component {\n\n  state = {\n    search: \"\",\n    isToggleOn: false,\n  }\n  \n  // async componentDidMount() {\n  //   console.log(\"\")\n  // } \n\n  async updateSearch(e) {\n    await this.setState({search: e.target.value});\n    const searchResults = this.props.cities.filter( (city) =>{\n      return city.name.indexOf(this.state.search) !== -1;\n    })\n    this.props.dispatch(filterCities(searchResults))\n  }\n\n  async updateNewCity(e) {\n    let newArrary = []\n    //TO DO: fix this somehow - Tolo and Toledo clash. Should only be at the end of the word. Diff ONblahblah?\n    for(let i =0; i<this.props.cities.length; i++) {\n      newArrary.push(this.props.cities[i].name)\n    }\n    if(!newArrary.includes(e.target.value)) {\n      this.props.dispatch(setNewCity(e.target.value))\n    } else {\n      console.log('Sorry! This city was already created')\n    }\n  }\n\n  async updateNewCountry(e) {\n    this.props.dispatch(setNewCountry(e.target.value))\n  }\n\n  async updateNewUrl(e) {\n    this.props.dispatch(setNewUrl(e.target.value))\n  }\n\n  toggleAddCityForm() {\n    // this.setState(state => ({\n    //   isToggleOn: !state.isToggleOn\n    // }));\n\n    this.setState({\n      isToggleOn: !this.state.isToggleOn\n    })\n  }\n\n  render() {\n\n    return (\n      <div>\n      <NavBar></NavBar>\n      \n      <Container>\n        \n        <h1>Cities</h1>\n\n      <div>\n        <Button color=\"primary\" onClick={this.toggleAddCityForm.bind(this)}>Add City</Button>\n        <Collapse isOpen={this.state.isOpen}>\n          <Card>\n            <CardBody>\n              <label htmlFor=\"addCity\"> Add City: </label>\n              <input id=\"addCity\" type=\"text\" value ={this.props.newCity} onChange={this.updateNewCity.bind(this)}></input>\n              <br></br> <label htmlFor=\"addCountry\"> Country: </label>\n              <input id=\"addCountry\" type=\"text\" value ={this.props.newCountry} onChange={this.updateNewCountry.bind(this)}></input>\n              <br></br><label htmlFor=\"addImage\"> Image URL: </label>\n              <input id=\"addImage\" type=\"text\" value ={this.props.newUrl} onChange={this.updateNewUrl.bind(this)}></input>\n              <br></br>\n              \n              <PostResource \n                url=\"http://localhost:5000/api/cities\"\n                parentComp = \"cities\"\n                >  \n              </PostResource>\n            </CardBody>\n          </Card>\n        </Collapse>\n      </div>\n      \n        <br></br>\n        <label htmlFor=\"searchBar\"> Search List: </label>\n        <input id=\"searchBar\" type=\"text\" value ={this.state.search} onChange={this.updateSearch.bind(this)}></input>\n\n        <ListGroup>\n          {this.props.loading ? <p>loading...</p> : \n          <TransitionGroup className=\"cities-list\">\n            {this.props.filteredResults.map(({ id, name, country, imageUrl, itinerariesUrl}) => (\n              <CSSTransition key={id} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                <a href={itinerariesUrl}>\n                <ItineraryCover\n                imageUrl = {imageUrl}\n                styleInfo={\"CitiesList\"}\n                cityName={name + \", \" + country}\n                ></ItineraryCover>\n                </a>\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n          }\n        </ListGroup>\n      </Container>\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cities: state.cities.cities,\n    status: state.cities.status,\n    loading: state.cities.loading,\n    filteredResults: state.cities.filteredResults,\n    newCity: state.cities.newCity,\n    newCountry: state.cities.newCountry,\n    newUrl: state.cities.newUrl,\n  }\n}\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     filterSearch: searchResults => dispatch(filterCities(searchResults))\n//   }\n// }\n\n\nexport default connect(mapStateToProps)(Cities)"]},"metadata":{},"sourceType":"module"}