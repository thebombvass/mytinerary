{"ast":null,"code":"var _jsxFileName = \"/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/PostResource.js\";\nimport React, { Component } from 'react';\nimport { Container, Button } from 'reactstrap';\nexport default class PostResrouce extends Component {\n  async makePost(url, dataObject) {\n    if (Object.keys(dataObject).includes('name')) {\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      let newArray = [];\n\n      for (let i = 0; i < data.length; i++) {\n        newArray.push(data[i].name);\n      }\n\n      console.log(newArray);\n\n      if (!newArray.includes(dataObject.name)) {\n        fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(dataObject)\n        }).then(res => res.json()).then(data => console.log(data), alert('City created!'), this.props.action).catch(err => console.log(err));\n      } else {\n        alert('Sorry, this resource was already created');\n      }\n    }\n  }\n\n  testFunction(url, dataObject) {\n    console.log(\"URL: \" + url);\n    console.log(\"data object\");\n    console.log(dataObject);\n  }\n\n  render() {\n    return React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '2rem'\n      },\n      onClick: () => {\n        const url = this.props.url;\n        const dataObject = this.props.dataObject;\n        this.makePost(url, dataObject); // this.testFunction(url,dataObject)\n\n        {\n          this.props.action;\n        }\n        ;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Submit\");\n  }\n\n}","map":{"version":3,"sources":["/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/PostResource.js"],"names":["React","Component","Container","Button","PostResrouce","makePost","url","dataObject","Object","keys","includes","response","fetch","data","json","console","log","newArray","i","length","push","name","method","headers","body","JSON","stringify","then","res","alert","props","action","catch","err","testFunction","render","marginBottom"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,YAAlC;AAEA,eAAe,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAEhD,QAAMI,QAAN,CAAeC,GAAf,EAAoBC,UAApB,EAAgC;AAC5B,QAAGC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,QAAxB,CAAiC,MAAjC,CAAH,EAA6C;AACzC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAD,CAA5B;AACA,YAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,UAAII,QAAQ,GAAG,EAAf;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,IAAI,CAACM,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;AAC7BD,QAAAA,QAAQ,CAACG,IAAT,CAAcP,IAAI,CAACK,CAAD,CAAJ,CAAQG,IAAtB;AACH;;AACDN,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;;AACA,UAAG,CAACA,QAAQ,CAACP,QAAT,CAAkBH,UAAU,CAACc,IAA7B,CAAJ,EAAwC;AACpCT,QAAAA,KAAK,CAACN,GAAD,EAAM;AACPgB,UAAAA,MAAM,EAAE,MADD;AAEPC,UAAAA,OAAO,EAAE;AACT,4BAAgB;AADP,WAFF;AAKPC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAenB,UAAf;AALC,SAAN,CAAL,CAMGoB,IANH,CAMQC,GAAG,IAAIA,GAAG,CAACd,IAAJ,EANf,EAOCa,IAPD,CAOMd,IAAI,IAAIE,OAAO,CAACC,GAAR,CAAYH,IAAZ,CAPd,EAOiCgB,KAAK,CAAC,eAAD,CAPtC,EAOyD,KAAKC,KAAL,CAAWC,MAPpE,EAQCC,KARD,CAQOC,GAAG,IAAIlB,OAAO,CAACC,GAAR,CAAYiB,GAAZ,CARd;AASH,OAVD,MAUO;AACHJ,QAAAA,KAAK,CAAC,0CAAD,CAAL;AACH;AACJ;AACL;;AAEDK,EAAAA,YAAY,CAAC5B,GAAD,EAAMC,UAAN,EAAkB;AACzBQ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUV,GAAtB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ;AACJ;;AAEA4B,EAAAA,MAAM,GAAE;AACJ,WACI,oBAAC,MAAD;AACA,MAAA,KAAK,EAAC,MADN;AAEA,MAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE;AAAf,OAFP;AAGA,MAAA,OAAO,EAAE,MAAK;AACV,cAAM9B,GAAG,GAAG,KAAKwB,KAAL,CAAWxB,GAAvB;AACA,cAAMC,UAAU,GAAG,KAAKuB,KAAL,CAAWvB,UAA9B;AACA,aAAKF,QAAL,CAAcC,GAAd,EAAmBC,UAAnB,EAHU,CAIV;;AACA;AAAC,eAAKuB,KAAL,CAAWC,MAAX;AAAkB;AAAA;AACtB,OATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAcH;;AAjD+C","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Button } from 'reactstrap';\n\nexport default class PostResrouce extends Component {\n\n    async makePost(url, dataObject) {\n        if(Object.keys(dataObject).includes('name')) {\n            const response = await fetch(url);\n            const data = await response.json();\n            console.log(data)\n            let newArray = []\n            for(let i=0; i<data.length; i++) {\n                newArray.push(data[i].name)\n            }\n            console.log(newArray)\n            if(!newArray.includes(dataObject.name)) {\n                fetch(url, {\n                    method: 'POST',\n                    headers: {\n                    'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(dataObject)\n                }).then(res => res.json())\n                .then(data => console.log(data), alert('City created!'), this.props.action)\n                .catch(err => console.log(err));\n            } else {\n                alert('Sorry, this resource was already created')\n            }\n        }\n   }\n\n   testFunction(url, dataObject) {\n        console.log(\"URL: \" + url);\n        console.log(\"data object\");\n        console.log(dataObject);\n   }\n\n    render(){\n        return (\n            <Button \n            color=\"dark\" \n            style={{marginBottom: '2rem'}}\n            onClick={()=> {\n                const url = this.props.url;\n                const dataObject = this.props.dataObject;\n                this.makePost(url, dataObject);\n                // this.testFunction(url,dataObject)\n                {this.props.action};\n            }}\n            >Submit</Button>\n\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}