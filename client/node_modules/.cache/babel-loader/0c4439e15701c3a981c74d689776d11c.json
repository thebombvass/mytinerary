{"ast":null,"code":"var _jsxFileName = \"/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/PostResource.js\";\nimport React, { Component } from 'react';\nimport { Container, Button } from 'reactstrap';\nimport { connect } from 'react-redux'; //import actions needed below\n\nimport { clearNewCityFields } from '../store/actions/cityActions';\n\nclass PostResource extends Component {\n  async makePost(url, dataObject) {\n    this.props.dispatch(clearNewCityFields);\n    console.log('working');\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(dataObject)\n    }).then(res => res.json()) //here in then is where you should update cities(nested ajax??) with FETCH_CITIES_REQUEST\n    //can alert??\n    .then(data => console.log(data), alert('City created!')).catch(err => console.log(err));\n  }\n\n  testFunction(url, dataObject) {\n    console.log(\"URL: \" + url);\n    console.log(\"data object\");\n    console.log(dataObject);\n  }\n\n  render() {\n    return React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '2rem'\n      },\n      onClick: () => {\n        const url = this.props.url;\n        const dataObject = {\n          \"name\": this.props.newCity,\n          \"country\": this.props.newCountry,\n          \"imageUrl\": this.props.newUrl\n        };\n        this.makePost(url, dataObject); // this.testFunction(url,dataObject)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Submit\");\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    newCity: state.cities.newCity,\n    newCountry: state.cities.newCountry,\n    newUrl: state.cities.newUrl\n  };\n};\n\nexport default connect(mapStateToProps)(PostResource);","map":{"version":3,"sources":["/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/PostResource.js"],"names":["React","Component","Container","Button","connect","clearNewCityFields","PostResource","makePost","url","dataObject","props","dispatch","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","data","alert","catch","err","testFunction","render","marginBottom","newCity","newCountry","newUrl","mapStateToProps","state","cities"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,YAAlC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,kBAAT,QAAmC,8BAAnC;;AAIA,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAEjC,QAAMM,QAAN,CAAeC,GAAf,EAAoBC,UAApB,EAAgC;AAC5B,SAAKC,KAAL,CAAWC,QAAX,CAAoBN,kBAApB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAC,IAAAA,KAAK,CAACN,GAAD,EAAM;AACPO,MAAAA,MAAM,EAAE,MADD;AAEPC,MAAAA,OAAO,EAAE;AACT,wBAAgB;AADP,OAFF;AAKPC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,UAAf;AALC,KAAN,CAAL,CAMGW,IANH,CAMQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANf,EAOA;AACA;AARA,KASCF,IATD,CASMG,IAAI,IAAIX,OAAO,CAACC,GAAR,CAAYU,IAAZ,CATd,EASiCC,KAAK,CAAC,eAAD,CATtC,EAUCC,KAVD,CAUOC,GAAG,IAAId,OAAO,CAACC,GAAR,CAAYa,GAAZ,CAVd;AAYJ;;AAEDC,EAAAA,YAAY,CAACnB,GAAD,EAAMC,UAAN,EAAkB;AACzBG,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUL,GAAtB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACJ;;AAEAmB,EAAAA,MAAM,GAAE;AACJ,WACI,oBAAC,MAAD;AACA,MAAA,KAAK,EAAC,MADN;AAEA,MAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE;AAAf,OAFP;AAGA,MAAA,OAAO,EAAE,MAAK;AACV,cAAMrB,GAAG,GAAG,KAAKE,KAAL,CAAWF,GAAvB;AACA,cAAMC,UAAU,GAAG;AAAC,kBAAQ,KAAKC,KAAL,CAAWoB,OAApB;AAA6B,qBAAW,KAAKpB,KAAL,CAAWqB,UAAnD;AAA+D,sBAAY,KAAKrB,KAAL,CAAWsB;AAAtF,SAAnB;AACA,aAAKzB,QAAL,CAAcC,GAAd,EAAmBC,UAAnB,EAHU,CAIV;AACH,OARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAYH;;AAtCgC;;AAyCrC,MAAMwB,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHJ,IAAAA,OAAO,EAAEI,KAAK,CAACC,MAAN,CAAaL,OADnB;AAEHC,IAAAA,UAAU,EAAEG,KAAK,CAACC,MAAN,CAAaJ,UAFtB;AAGHC,IAAAA,MAAM,EAAEE,KAAK,CAACC,MAAN,CAAaH;AAHlB,GAAP;AAKD,CANH;;AAQA,eAAe5B,OAAO,CAAC6B,eAAD,CAAP,CAAyB3B,YAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Button } from 'reactstrap';\nimport { connect } from 'react-redux'\n//import actions needed below\nimport { clearNewCityFields } from '../store/actions/cityActions';\n\n\n\nclass PostResource extends Component {    \n\n    async makePost(url, dataObject) {\n        this.props.dispatch(clearNewCityFields)\n        console.log('working')\n        fetch(url, {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(dataObject)\n        }).then(res => res.json())\n        //here in then is where you should update cities(nested ajax??) with FETCH_CITIES_REQUEST\n        //can alert??\n        .then(data => console.log(data), alert('City created!'))\n        .catch(err => console.log(err))\n\n   }\n\n   testFunction(url, dataObject) {\n        console.log(\"URL: \" + url);\n        console.log(\"data object\");\n        console.log(dataObject);\n   }\n\n    render(){\n        return (\n            <Button \n            color=\"dark\" \n            style={{marginBottom: '2rem'}}\n            onClick={()=> {\n                const url = this.props.url;\n                const dataObject = {\"name\": this.props.newCity, \"country\": this.props.newCountry, \"imageUrl\": this.props.newUrl}\n                this.makePost(url, dataObject);\n                // this.testFunction(url,dataObject)\n            }}\n            >Submit</Button>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        newCity: state.cities.newCity,\n        newCountry: state.cities.newCountry,\n        newUrl: state.cities.newUrl,\n    }\n  }\n\nexport default connect(mapStateToProps)(PostResource)"]},"metadata":{},"sourceType":"module"}