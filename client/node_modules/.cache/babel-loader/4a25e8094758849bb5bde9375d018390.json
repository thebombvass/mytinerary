{"ast":null,"code":"var _jsxFileName = \"/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/Cities.js\";\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport NavBar from './NavBar'; //components\n\nimport PostResource from './PostResource';\nimport ItineraryCover from './ItineraryCover'; //action imports\n\nimport { filterCities, setNewCity, setNewCountry, setNewUrl } from '../store/actions/cityActions';\n\nclass Cities extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    console.log(this.props.loading); // this.timer = setInterval(()=> console.log('ok'), 5000)\n  }\n\n  async updateSearch(e) {\n    await this.setState({\n      search: e.target.value\n    });\n    const searchResults = this.props.cities.filter(city => {\n      return city.name.indexOf(this.state.search) !== -1;\n    });\n    this.props.dispatch(filterCities(searchResults));\n  }\n\n  async updateNewCity(e) {\n    let newArrary = [];\n\n    for (let i = 0; i < this.props.cities.length; i++) {\n      newArrary.push(this.props.cities[i].name);\n    }\n\n    if (!newArrary.includes(e.target.value)) {\n      this.props.dispatch(setNewCity(e.target.value));\n    } else {\n      console.log('Sorry! This city was already created');\n    }\n  }\n\n  async updateNewCountry(e) {\n    this.props.dispatch(setNewCountry(e.target.value));\n  }\n\n  async updateNewUrl(e) {\n    this.props.dispatch(setNewUrl(e.target.value));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Cities\"), React.createElement(\"label\", {\n      htmlFor: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" Add City: \"), React.createElement(\"input\", {\n      id: \"searchBar\",\n      type: \"text\",\n      value: this.props.newCity,\n      onChange: this.updateNewCity.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), \" \", React.createElement(\"label\", {\n      htmlFor: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \" Country: \"), React.createElement(\"input\", {\n      id: \"searchBar\",\n      type: \"text\",\n      value: this.props.newCountry,\n      onChange: this.updateNewCountry.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \" Image URL: \"), React.createElement(\"input\", {\n      id: \"searchBar\",\n      type: \"text\",\n      value: this.props.newUrl,\n      onChange: this.updateNewUrl.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(PostResource, {\n      url: \"http://localhost:5000/api/cities\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \" Search List: \"), React.createElement(\"input\", {\n      id: \"searchBar\",\n      type: \"text\",\n      value: this.state.search,\n      onChange: this.updateSearch.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.props.loading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"loading...\") : React.createElement(TransitionGroup, {\n      className: \"cities-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.props.filteredResults.map(({\n      id,\n      name,\n      country,\n      imageUrl,\n      itinerariesUrl\n    }) => React.createElement(CSSTransition, {\n      key: id,\n      timeout: 500,\n      classNames: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: itinerariesUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(ItineraryCover, {\n      imageUrl: imageUrl,\n      styleInfo: \"CitiesList\",\n      cityName: name + \", \" + country,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })))))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities.cities,\n    status: state.cities.status,\n    loading: state.cities.loading,\n    filteredResults: state.cities.filteredResults,\n    newCity: state.cities.newCity,\n    newCountry: state.cities.newCountry,\n    newUrl: state.cities.newUrl\n  };\n}; // const mapDispatchToProps = dispatch => {\n//   return {\n//     filterSearch: searchResults => dispatch(filterCities(searchResults))\n//   }\n// }\n\n\nexport default connect(mapStateToProps)(Cities);","map":{"version":3,"sources":["/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/Cities.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","CSSTransition","TransitionGroup","connect","NavBar","PostResource","ItineraryCover","filterCities","setNewCity","setNewCountry","setNewUrl","Cities","state","search","componentDidMount","console","log","props","loading","updateSearch","e","setState","target","value","searchResults","cities","filter","city","name","indexOf","dispatch","updateNewCity","newArrary","i","length","push","includes","updateNewCountry","updateNewUrl","render","newCity","bind","newCountry","newUrl","filteredResults","map","id","country","imageUrl","itinerariesUrl","mapStateToProps","status"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'\nimport NavBar from './NavBar'\n\n\n//components\nimport PostResource from './PostResource';\nimport ItineraryCover from './ItineraryCover';\n\n//action imports\nimport { filterCities, setNewCity, setNewCountry, setNewUrl } from '../store/actions/cityActions';\n\nclass Cities extends Component {\n\n  state = {\n    search: \"\",\n  }\n  \n  async componentDidMount() {\n    console.log(this.props.loading)\n    // this.timer = setInterval(()=> console.log('ok'), 5000)\n  }\n\n  async updateSearch(e) {\n    await this.setState({search: e.target.value});\n    const searchResults = this.props.cities.filter( (city) =>{\n      return city.name.indexOf(this.state.search) !== -1;\n    })\n    this.props.dispatch(filterCities(searchResults))\n  }\n\n  async updateNewCity(e) {\n    let newArrary = []\n    for(let i =0; i<this.props.cities.length; i++) {\n      newArrary.push(this.props.cities[i].name)\n    }\n    if(!newArrary.includes(e.target.value)) {\n      this.props.dispatch(setNewCity(e.target.value))\n    } else {\n      console.log('Sorry! This city was already created')\n    }\n  }\n\n  async updateNewCountry(e) {\n    this.props.dispatch(setNewCountry(e.target.value))\n  }\n\n  async updateNewUrl(e) {\n    this.props.dispatch(setNewUrl(e.target.value))\n  }\n\n  render() {\n    return (\n      <div>\n      <NavBar></NavBar>\n      \n      <Container>\n\n        <h1>Cities</h1>\n\n        <label htmlFor=\"searchBar\"> Add City: </label>\n        <input id=\"searchBar\" type=\"text\" value ={this.props.newCity} onChange={this.updateNewCity.bind(this)}></input>\n        <br></br> <label htmlFor=\"searchBar\"> Country: </label>\n        <input id=\"searchBar\" type=\"text\" value ={this.props.newCountry} onChange={this.updateNewCountry.bind(this)}></input>\n        <br></br><label htmlFor=\"searchBar\"> Image URL: </label>\n        <input id=\"searchBar\" type=\"text\" value ={this.props.newUrl} onChange={this.updateNewUrl.bind(this)}></input>\n        <br></br>\n        \n        <PostResource \n          url=\"http://localhost:5000/api/cities\"\n          \n          >  \n        </PostResource>\n        \n        <br></br>\n        <label htmlFor=\"searchBar\"> Search List: </label>\n        <input id=\"searchBar\" type=\"text\" value ={this.state.search} onChange={this.updateSearch.bind(this)}></input>\n\n        <ListGroup>\n          {this.props.loading ? <p>loading...</p> : \n          <TransitionGroup className=\"cities-list\">\n            {this.props.filteredResults.map(({ id, name, country, imageUrl, itinerariesUrl}) => (\n              <CSSTransition key={id} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                <a href={itinerariesUrl}>\n                <ItineraryCover\n                imageUrl = {imageUrl}\n                styleInfo={\"CitiesList\"}\n                cityName={name + \", \" + country}\n                ></ItineraryCover>\n                </a>\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n          }\n        </ListGroup>\n      </Container>\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cities: state.cities.cities,\n    status: state.cities.status,\n    loading: state.cities.loading,\n    filteredResults: state.cities.filteredResults,\n    newCity: state.cities.newCity,\n    newCountry: state.cities.newCountry,\n    newUrl: state.cities.newUrl,\n  }\n}\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     filterSearch: searchResults => dispatch(filterCities(searchResults))\n//   }\n// }\n\n\nexport default connect(mapStateToProps)(Cities)"]},"metadata":{},"sourceType":"module"}