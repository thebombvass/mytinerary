{"ast":null,"code":"var _jsxFileName = \"/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/OneCityMultiItin.js\";\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'; //components\n\nimport ItineraryCover from './ItineraryCover.js';\n\nclass OneCityMultiItin extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      itinerariesData: [],\n      loadinghere: true\n    };\n  }\n\n  async componentDidMount() {\n    const thisCityUrl = window.location.pathname.slice(13);\n    var cityName = \"\";\n\n    for (var i = 0; i < thisCityUrl.length; i++) {\n      if (thisCityUrl.charAt(i) == \"%20\") {\n        cityName += \" \";\n      } else {\n        cityName += thisCityUrl.charAt(i);\n      }\n    }\n\n    await fetch(\"http://localhost:5000/api/itineraries/\" + window.location.pathname.slice(13)).then(async response => {\n      this.state.itinerariesData = await response.json();\n      console.log(this.state.itinerariesData);\n      this.setState({\n        loadinghere: false\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, this.state.loading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"loading...\") : React.createElement(TransitionGroup, {\n      className: \"cities-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.state.itinerariesData.map(({\n      id,\n      title\n    }) => React.createElement(CSSTransition, {\n      key: id,\n      timeout: 500,\n      classNames: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, title)))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities.cities,\n    loading: state.cities.loading\n  };\n};\n\nexport default connect(mapStateToProps)(OneCityMultiItin);","map":{"version":3,"sources":["/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/OneCityMultiItin.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","CSSTransition","TransitionGroup","connect","ItineraryCover","OneCityMultiItin","state","itinerariesData","loadinghere","componentDidMount","thisCityUrl","window","location","pathname","slice","cityName","i","length","charAt","fetch","then","response","json","console","log","setState","catch","err","render","loading","map","id","title","mapStateToProps","cities"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,aAA/B,QAAoD,YAApD;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,wBAA/C;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,OAAOC,cAAP,MAA2B,qBAA3B;;AAGA,MAAMC,gBAAN,SAA+BR,SAA/B,CAAyC;AAAA;AAAA;AAAA,SAErCS,KAFqC,GAE7B;AACJC,MAAAA,eAAe,EAAE,EADb;AAEJC,MAAAA,WAAW,EAAE;AAFT,KAF6B;AAAA;;AAQrC,QAAMC,iBAAN,GAA0B;AACtB,UAAMC,WAAW,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,EAA/B,CAApB;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGN,WAAW,CAACO,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,UAAIN,WAAW,CAACQ,MAAZ,CAAmBF,CAAnB,KAAyB,KAA7B,EAAoC;AAChCD,QAAAA,QAAQ,IAAI,GAAZ;AACH,OAFD,MAEO;AACHA,QAAAA,QAAQ,IAAIL,WAAW,CAACQ,MAAZ,CAAmBF,CAAnB,CAAZ;AACH;AACJ;;AACD,UAAMG,KAAK,CAAC,2CAA2CR,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,EAA/B,CAA5C,CAAL,CACDM,IADC,CACI,MAAMC,QAAN,IAAkB;AACpB,WAAKf,KAAL,CAAWC,eAAX,GAA6B,MAAMc,QAAQ,CAACC,IAAT,EAAnC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWC,eAAvB;AACA,WAAKkB,QAAL,CAAc;AAACjB,QAAAA,WAAW,EAAE;AAAd,OAAd;AACH,KALC,EAMDkB,KANC,CAMMC,GAAD,IAAQ;AACXJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH,KARC,CAAN;AASD;;AAEHC,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKtB,KAAL,CAAWuB,OAAX,GAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAArB,GACD,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKvB,KAAL,CAAWC,eAAX,CAA2BuB,GAA3B,CAA+B,CAAC;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,KAAD,KAChC,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAED,EAApB;AAAwB,MAAA,OAAO,EAAE,GAAjC;AAAsC,MAAA,UAAU,EAAC,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIC,KAAJ,CADA,CADJ,CADC,CADL,CAFA,CADJ,CADJ;AAiBH;;AA/CoC;;AAmDzC,MAAMC,eAAe,GAAI3B,KAAD,IAAW;AAC/B,SAAO;AACL4B,IAAAA,MAAM,EAAE5B,KAAK,CAAC4B,MAAN,CAAaA,MADhB;AAELL,IAAAA,OAAO,EAAEvB,KAAK,CAAC4B,MAAN,CAAaL;AAFjB,GAAP;AAID,CALH;;AAOA,eAAe1B,OAAO,CAAC8B,eAAD,CAAP,CAAyB5B,gBAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'\n//components\nimport ItineraryCover from './ItineraryCover.js'\n\n\nclass OneCityMultiItin extends Component {\n\n    state = {\n        itinerariesData: [],\n        loadinghere: true,\n      }\n      \n\n    async componentDidMount() {\n        const thisCityUrl = window.location.pathname.slice(13)\n        var cityName = \"\"\n        for (var i=0; i < thisCityUrl.length; i++) {\n            if (thisCityUrl.charAt(i) == \"%20\") {\n                cityName += \" \";\n            } else {\n                cityName += thisCityUrl.charAt(i);\n            }\n        }\n        await fetch(\"http://localhost:5000/api/itineraries/\" + window.location.pathname.slice(13))\n            .then(async(response)=> {\n                this.state.itinerariesData = await response.json()\n                console.log(this.state.itinerariesData)\n                this.setState({loadinghere: false})\n            })\n            .catch((err)=> {\n                console.log(err)\n            })\n      }    \n\n    render() {\n        return(\n            <Container>\n                <ListGroup>\n                {this.state.loading ? <p>loading...</p> : \n                <TransitionGroup className=\"cities-list\">\n                    {this.state.itinerariesData.map(({ id, title }) => (\n                    <CSSTransition key={id} timeout={500} classNames=\"fade\">\n                        <ListGroupItem>\n                        <p>{title}</p>\n                        </ListGroupItem>\n                    </CSSTransition>\n                    ))}\n                </TransitionGroup>\n                }\n                </ListGroup>\n            </Container>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      cities: state.cities.cities,\n      loading: state.cities.loading\n    }\n  }\n\nexport default connect(mapStateToProps)(OneCityMultiItin)\n"]},"metadata":{},"sourceType":"module"}