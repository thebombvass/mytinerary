{"ast":null,"code":"var _jsxFileName = \"/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/Cities.js\";\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport jwt_decode from 'jwt-decode'; //components\n\nimport PostResource from './PostResource';\nimport ItineraryCover from './ItineraryCover';\nimport NavBar from './NavBar'; //action imports\n\nimport { filterCities, setNewCity, setNewCountry, setNewUrl, saveLoggedInUser } from '../store/actions/cityActions';\n\nclass Cities extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    console.log(i);\n  }\n\n  async updateSearch(e) {\n    await this.setState({\n      search: e.target.value\n    });\n    const searchResults = this.props.cities.filter(city => {\n      return city.name.indexOf(this.state.search) !== -1;\n    });\n    this.props.dispatch(filterCities(searchResults));\n  }\n\n  async updateNewCity(e) {\n    let newArrary = []; //TO DO: fix this somehow - Tolo and Toledo clash. Should only be at the end of the word. Diff ONblahblah?\n\n    for (let i = 0; i < this.props.cities.length; i++) {\n      newArrary.push(this.props.cities[i].name);\n    }\n\n    if (!newArrary.includes(e.target.value)) {\n      this.props.dispatch(setNewCity(e.target.value));\n    } else {\n      console.log('Sorry! This city was already created');\n    }\n  }\n\n  async updateNewCountry(e) {\n    this.props.dispatch(setNewCountry(e.target.value));\n  }\n\n  async updateNewUrl(e) {\n    this.props.dispatch(setNewUrl(e.target.value));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Cities\"), React.createElement(\"label\", {\n      htmlFor: \"addCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \" Add City: \"), React.createElement(\"input\", {\n      id: \"addCity\",\n      type: \"text\",\n      value: this.props.newCity,\n      onChange: this.updateNewCity.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), \" \", React.createElement(\"label\", {\n      htmlFor: \"addCountry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \" Country: \"), React.createElement(\"input\", {\n      id: \"addCountry\",\n      type: \"text\",\n      value: this.props.newCountry,\n      onChange: this.updateNewCountry.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"addImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \" Image URL: \"), React.createElement(\"input\", {\n      id: \"addImage\",\n      type: \"text\",\n      value: this.props.newUrl,\n      onChange: this.updateNewUrl.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(PostResource, {\n      url: \"http://localhost:5000/api/cities\",\n      parentComp: \"cities\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \" Search List: \"), React.createElement(\"input\", {\n      id: \"searchBar\",\n      type: \"text\",\n      value: this.state.search,\n      onChange: this.updateSearch.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.props.loading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"loading...\") : React.createElement(TransitionGroup, {\n      className: \"cities-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.props.filteredResults.map(({\n      id,\n      name,\n      country,\n      imageUrl,\n      itinerariesUrl\n    }) => React.createElement(CSSTransition, {\n      key: id,\n      timeout: 500,\n      classNames: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: itinerariesUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(ItineraryCover, {\n      imageUrl: imageUrl,\n      styleInfo: \"CitiesList\",\n      cityName: name + \", \" + country,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })))))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities.cities,\n    status: state.cities.status,\n    loading: state.cities.loading,\n    filteredResults: state.cities.filteredResults,\n    newCity: state.cities.newCity,\n    newCountry: state.cities.newCountry,\n    newUrl: state.cities.newUrl,\n    isl\n  };\n}; // const mapDispatchToProps = dispatch => {\n//   return {\n//     filterSearch: searchResults => dispatch(filterCities(searchResults))\n//   }\n// }\n\n\nexport default connect(mapStateToProps)(Cities);","map":{"version":3,"sources":["/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/Cities.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","CSSTransition","TransitionGroup","connect","jwt_decode","PostResource","ItineraryCover","NavBar","filterCities","setNewCity","setNewCountry","setNewUrl","saveLoggedInUser","Cities","state","search","componentDidMount","console","log","i","updateSearch","e","setState","target","value","searchResults","props","cities","filter","city","name","indexOf","dispatch","updateNewCity","newArrary","length","push","includes","updateNewCountry","updateNewUrl","render","newCity","bind","newCountry","newUrl","loading","filteredResults","map","id","country","imageUrl","itinerariesUrl","mapStateToProps","status","isl"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'\nimport jwt_decode from 'jwt-decode'\n\n//components\nimport PostResource from './PostResource';\nimport ItineraryCover from './ItineraryCover';\nimport NavBar from './NavBar'\n\n//action imports\nimport { filterCities, setNewCity, setNewCountry, setNewUrl, saveLoggedInUser } from '../store/actions/cityActions';\n\nclass Cities extends Component {\n\n  state = {\n    search: \"\",\n  }\n  \n  async componentDidMount() {\n  console.log(i)\n  } \n\n  async updateSearch(e) {\n    await this.setState({search: e.target.value});\n    const searchResults = this.props.cities.filter( (city) =>{\n      return city.name.indexOf(this.state.search) !== -1;\n    })\n    this.props.dispatch(filterCities(searchResults))\n  }\n\n  async updateNewCity(e) {\n    let newArrary = []\n    //TO DO: fix this somehow - Tolo and Toledo clash. Should only be at the end of the word. Diff ONblahblah?\n    for(let i =0; i<this.props.cities.length; i++) {\n      newArrary.push(this.props.cities[i].name)\n    }\n    if(!newArrary.includes(e.target.value)) {\n      this.props.dispatch(setNewCity(e.target.value))\n    } else {\n      console.log('Sorry! This city was already created')\n    }\n  }\n\n  async updateNewCountry(e) {\n    this.props.dispatch(setNewCountry(e.target.value))\n  }\n\n  async updateNewUrl(e) {\n    this.props.dispatch(setNewUrl(e.target.value))\n  }\n\n  render() {\n\n    return (\n      <div>\n      <NavBar></NavBar>\n      \n      <Container>\n\n        <h1>Cities</h1>\n\n        <label htmlFor=\"addCity\"> Add City: </label>\n        <input id=\"addCity\" type=\"text\" value ={this.props.newCity} onChange={this.updateNewCity.bind(this)}></input>\n        <br></br> <label htmlFor=\"addCountry\"> Country: </label>\n        <input id=\"addCountry\" type=\"text\" value ={this.props.newCountry} onChange={this.updateNewCountry.bind(this)}></input>\n        <br></br><label htmlFor=\"addImage\"> Image URL: </label>\n        <input id=\"addImage\" type=\"text\" value ={this.props.newUrl} onChange={this.updateNewUrl.bind(this)}></input>\n        <br></br>\n        \n        <PostResource \n          url=\"http://localhost:5000/api/cities\"\n          parentComp = \"cities\"\n          >  \n        </PostResource>\n        \n        <br></br>\n        <label htmlFor=\"searchBar\"> Search List: </label>\n        <input id=\"searchBar\" type=\"text\" value ={this.state.search} onChange={this.updateSearch.bind(this)}></input>\n\n        <ListGroup>\n          {this.props.loading ? <p>loading...</p> : \n          <TransitionGroup className=\"cities-list\">\n            {this.props.filteredResults.map(({ id, name, country, imageUrl, itinerariesUrl}) => (\n              <CSSTransition key={id} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                <a href={itinerariesUrl}>\n                <ItineraryCover\n                imageUrl = {imageUrl}\n                styleInfo={\"CitiesList\"}\n                cityName={name + \", \" + country}\n                ></ItineraryCover>\n                </a>\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n          }\n        </ListGroup>\n      </Container>\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cities: state.cities.cities,\n    status: state.cities.status,\n    loading: state.cities.loading,\n    filteredResults: state.cities.filteredResults,\n    newCity: state.cities.newCity,\n    newCountry: state.cities.newCountry,\n    newUrl: state.cities.newUrl,\n    isl\n  }\n}\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     filterSearch: searchResults => dispatch(filterCities(searchResults))\n//   }\n// }\n\n\nexport default connect(mapStateToProps)(Cities)"]},"metadata":{},"sourceType":"module"}