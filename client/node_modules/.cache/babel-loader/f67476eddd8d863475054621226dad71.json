{"ast":null,"code":"var _jsxFileName = \"/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/OneCityMultiItin.js\";\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'; //components\n\nimport ItineraryCover from './ItineraryCover.js';\nimport NavBar from './NavBar.js';\n\nclass OneCityMultiItin extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      itinerariesData: [],\n      loadinghere: true\n    };\n  }\n\n  async componentDidMount() {\n    const thisCityUrl = window.location.pathname.slice(13); //To Do: is this used anywhere????\n\n    let cityName = \"\";\n\n    for (var i = 0; i < thisCityUrl.length; i++) {\n      if (thisCityUrl.charAt(i) == \"%\") {\n        cityName += \" \";\n        i += 2;\n      } else {\n        cityName += thisCityUrl.charAt(i);\n      }\n    }\n\n    await fetch(\"http://localhost:5000/api/itineraries/\" + window.location.pathname.slice(13)).then(async response => {\n      this.state.itinerariesData = await response.json();\n      console.log(this.state.itinerariesData);\n      this.setState({\n        loadinghere: false\n      });\n      this.props.cities.forEach(city => {\n        console.log(city.name);\n        console.log(cityName);\n\n        if (city.name == cityName) {\n          console.log(city.profPicUrl);\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, this.state.loadinghere ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"loading...\") : this.state.itinerariesData.map(({\n      id,\n      title,\n      profPicUrl\n    }) => React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(ItineraryCover, {\n      key: id,\n      imageUrl: profPicUrl,\n      styleInfo: \"OneCityMultiItin\",\n      cityName: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities.cities\n  };\n};\n\nexport default connect(mapStateToProps)(OneCityMultiItin);","map":{"version":3,"sources":["/Users/meganvomvas/Desktop/Kod/UbiqumJava/my-app/client/src/components/OneCityMultiItin.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","CSSTransition","TransitionGroup","connect","ItineraryCover","NavBar","OneCityMultiItin","state","itinerariesData","loadinghere","componentDidMount","thisCityUrl","window","location","pathname","slice","cityName","i","length","charAt","fetch","then","response","json","console","log","setState","props","cities","forEach","city","name","profPicUrl","catch","err","render","map","id","title","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'\n//components\nimport ItineraryCover from './ItineraryCover.js'\nimport NavBar from './NavBar.js'\n\n\nclass OneCityMultiItin extends Component {\n\n    state = {\n        itinerariesData: [],\n        loadinghere: true,\n      }\n      \n\n    async componentDidMount() {\n        const thisCityUrl = window.location.pathname.slice(13)\n        //To Do: is this used anywhere????\n        let cityName = \"\"\n        for (var i=0; i < thisCityUrl.length; i++) {\n            if (thisCityUrl.charAt(i) == \"%\") {\n                cityName += \" \";\n                i += 2;\n            } else {\n                cityName += thisCityUrl.charAt(i);\n            }\n        }\n        await fetch(\"http://localhost:5000/api/itineraries/\" + window.location.pathname.slice(13))\n            .then(async(response)=> {\n                this.state.itinerariesData = await response.json()\n                console.log(this.state.itinerariesData)\n                this.setState({loadinghere: false})\n                this.props.cities.forEach((city) => {\n                    console.log(city.name)\n                    console.log(cityName)\n                    if(city.name == cityName) {\n                        console.log(city.profPicUrl)\n                    }\n                })\n            })\n            .catch((err)=> {\n                console.log(err)\n            })\n      }    \n\n    render() {\n        return(\n            <div>\n            <NavBar></NavBar>\n            <img></img>\n            <Container>\n                <ListGroup>\n                {this.state.loadinghere ? <p>loading...</p> : \n                    this.state.itinerariesData.map(({ id, title, profPicUrl }) => (\n                        <ListGroupItem>\n                        <ItineraryCover\n                        key={id}\n                        imageUrl = {profPicUrl}\n                        styleInfo={\"OneCityMultiItin\"}\n                        cityName={title}\n                        ></ItineraryCover>\n                        </ListGroupItem>\n                    ))}\n                </ListGroup>\n            </Container>\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      cities: state.cities.cities,\n    }\n  }\n\nexport default connect(mapStateToProps)(OneCityMultiItin)\n"]},"metadata":{},"sourceType":"module"}